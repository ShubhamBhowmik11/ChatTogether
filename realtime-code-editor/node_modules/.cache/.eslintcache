[{"D:\\WebDevelopment Project\\CodeTogether\\realtime-code-editor\\src\\index.js":"1","D:\\WebDevelopment Project\\CodeTogether\\realtime-code-editor\\src\\App.js":"2","D:\\WebDevelopment Project\\CodeTogether\\realtime-code-editor\\src\\reportWebVitals.js":"3","D:\\WebDevelopment Project\\CodeTogether\\realtime-code-editor\\src\\pages\\Home.js":"4","D:\\WebDevelopment Project\\CodeTogether\\realtime-code-editor\\src\\pages\\EditorPage.js":"5","D:\\WebDevelopment Project\\CodeTogether\\realtime-code-editor\\src\\Actions.js":"6","D:\\WebDevelopment Project\\CodeTogether\\realtime-code-editor\\src\\socket.js":"7","D:\\WebDevelopment Project\\CodeTogether\\realtime-code-editor\\src\\components\\Editor.js":"8","D:\\WebDevelopment Project\\CodeTogether\\realtime-code-editor\\src\\components\\Client.js":"9"},{"size":517,"mtime":1755790115033,"results":"10","hashOfConfig":"11"},{"size":1022,"mtime":1755790115031,"results":"12","hashOfConfig":"11"},{"size":375,"mtime":1755790115034,"results":"13","hashOfConfig":"11"},{"size":2708,"mtime":1756140248031,"results":"14","hashOfConfig":"11"},{"size":4544,"mtime":1755790115034,"results":"15","hashOfConfig":"11"},{"size":212,"mtime":1755790115030,"results":"16","hashOfConfig":"11"},{"size":320,"mtime":1755790115034,"results":"17","hashOfConfig":"11"},{"size":1864,"mtime":1755790115032,"results":"18","hashOfConfig":"11"},{"size":325,"mtime":1755790115032,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16rddpe",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\WebDevelopment Project\\CodeTogether\\realtime-code-editor\\src\\index.js",[],[],"D:\\WebDevelopment Project\\CodeTogether\\realtime-code-editor\\src\\App.js",[],[],"D:\\WebDevelopment Project\\CodeTogether\\realtime-code-editor\\src\\reportWebVitals.js",[],[],"D:\\WebDevelopment Project\\CodeTogether\\realtime-code-editor\\src\\pages\\Home.js",["49"],[],"D:\\WebDevelopment Project\\CodeTogether\\realtime-code-editor\\src\\pages\\EditorPage.js",["50"],[],"import React, { useState, useRef, useEffect } from 'react';\r\nimport toast from 'react-hot-toast';\r\nimport ACTIONS from '../Actions';\r\nimport Client from '../components/Client';\r\nimport Editor from '../components/Editor';\r\nimport { initSocket } from '../socket';\r\nimport {\r\n    useLocation,\r\n    useNavigate,\r\n    Navigate,\r\n    useParams,\r\n} from 'react-router-dom';\r\n\r\nconst EditorPage = () => {\r\n    const socketRef = useRef(null);\r\n    const codeRef = useRef(null);\r\n    const location = useLocation();\r\n    const { roomId } = useParams();\r\n    const reactNavigator = useNavigate();\r\n    const [clients, setClients] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            socketRef.current = await initSocket();\r\n            socketRef.current.on('connect_error', (err) => handleErrors(err));\r\n            socketRef.current.on('connect_failed', (err) => handleErrors(err));\r\n\r\n            function handleErrors(e) {\r\n                console.log('socket error', e);\r\n                toast.error('Socket connection failed, try again later.');\r\n                reactNavigator('/');\r\n            }\r\n\r\n            socketRef.current.emit(ACTIONS.JOIN, {\r\n                roomId,\r\n                username: location.state?.username,\r\n            });\r\n\r\n            // Listening for joined event\r\n            socketRef.current.on(\r\n                ACTIONS.JOINED,\r\n                ({ clients, username, socketId }) => {\r\n                    if (username !== location.state?.username) {\r\n                        toast.success(`${username} joined the room.`);\r\n                        console.log(`${username} joined`);\r\n                    }\r\n                    setClients(clients);\r\n                    socketRef.current.emit(ACTIONS.SYNC_CODE, {\r\n                        code: codeRef.current,\r\n                        socketId,\r\n                    });\r\n                }\r\n            );\r\n\r\n            // Listening for disconnected\r\n            socketRef.current.on(\r\n                ACTIONS.DISCONNECTED,\r\n                ({ socketId, username }) => {\r\n                    toast.success(`${username} left the room.`);\r\n                    setClients((prev) => {\r\n                        return prev.filter(\r\n                            (client) => client.socketId !== socketId\r\n                        );\r\n                    });\r\n                }\r\n            );\r\n        };\r\n        init();\r\n        return () => {\r\n            socketRef.current.disconnect();\r\n            socketRef.current.off(ACTIONS.JOINED);\r\n            socketRef.current.off(ACTIONS.DISCONNECTED);\r\n        };\r\n    }, []);\r\n\r\n    async function copyRoomId() {\r\n        try {\r\n            await navigator.clipboard.writeText(roomId);\r\n            toast.success('Room ID has been copied to your clipboard');\r\n        } catch (err) {\r\n            toast.error('Could not copy the Room ID');\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    function leaveRoom() {\r\n        reactNavigator('/');\r\n    }\r\n\r\n    if (!location.state) {\r\n        return <Navigate to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"mainWrap\">\r\n            <div className=\"aside\">\r\n                <div className=\"asideInner\">\r\n                    <div className=\"logo\">\r\n                        <img\r\n                            className=\"logoImage\"\r\n                            src=\"/code-sync.png\"\r\n                            alt=\"logo\"\r\n                        />\r\n                    </div>\r\n                    <h3>Connected</h3>\r\n                    <div className=\"clientsList\">\r\n                        {clients.map((client) => (\r\n                            <Client\r\n                                key={client.socketId}\r\n                                username={client.username}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <button className=\"btn copyBtn\" onClick={copyRoomId}>\r\n                    Copy ROOM ID\r\n                </button>\r\n                <button className=\"btn leaveBtn\" onClick={leaveRoom}>\r\n                    Leave\r\n                </button>\r\n            </div>\r\n            <div className=\"editorWrap\">\r\n                <Editor\r\n                    socketRef={socketRef}\r\n                    roomId={roomId}\r\n                    onCodeChange={(code) => {\r\n                        codeRef.current = code;\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditorPage;\r\n","D:\\WebDevelopment Project\\CodeTogether\\realtime-code-editor\\src\\Actions.js",[],[],"D:\\WebDevelopment Project\\CodeTogether\\realtime-code-editor\\src\\socket.js",[],[],"D:\\WebDevelopment Project\\CodeTogether\\realtime-code-editor\\src\\components\\Editor.js",["51","52","53"],[],"import React, { useEffect, useRef } from 'react';\r\nimport Codemirror from 'codemirror';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/dracula.css';\r\nimport 'codemirror/mode/javascript/javascript';\r\nimport 'codemirror/addon/edit/closetag';\r\nimport 'codemirror/addon/edit/closebrackets';\r\nimport ACTIONS from '../Actions';\r\n\r\nconst Editor = ({ socketRef, roomId, onCodeChange }) => {\r\n    const editorRef = useRef(null);\r\n    useEffect(() => {\r\n        async function init() {\r\n            editorRef.current = Codemirror.fromTextArea(\r\n                document.getElementById('realtimeEditor'),\r\n                {\r\n                    mode: { name: 'javascript', json: true },\r\n                    theme: 'dracula',\r\n                    autoCloseTags: true,\r\n                    autoCloseBrackets: true,\r\n                    lineNumbers: true,\r\n                }\r\n            );\r\n\r\n            editorRef.current.on('change', (instance, changes) => {\r\n                const { origin } = changes;\r\n                const code = instance.getValue();\r\n                onCodeChange(code);\r\n                if (origin !== 'setValue') {\r\n                    socketRef.current.emit(ACTIONS.CODE_CHANGE, {\r\n                        roomId,\r\n                        code,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        init();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (socketRef.current) {\r\n            socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\r\n                if (code !== null) {\r\n                    editorRef.current.setValue(code);\r\n                }\r\n            });\r\n        }\r\n\r\n        return () => {\r\n            socketRef.current.off(ACTIONS.CODE_CHANGE);\r\n        };\r\n    }, [socketRef.current]);\r\n\r\n    return <textarea id=\"realtimeEditor\"></textarea>;\r\n};\r\n\r\nexport default Editor;\r\n","D:\\WebDevelopment Project\\CodeTogether\\realtime-code-editor\\src\\components\\Client.js",[],[],{"ruleId":"54","severity":1,"message":"55","line":68,"column":25,"nodeType":"56","endLine":72,"endColumn":26},{"ruleId":"57","severity":1,"message":"58","line":74,"column":8,"nodeType":"59","endLine":74,"endColumn":10,"suggestions":"60"},{"ruleId":"57","severity":1,"message":"61","line":38,"column":8,"nodeType":"59","endLine":38,"endColumn":10,"suggestions":"62"},{"ruleId":"57","severity":1,"message":"63","line":50,"column":23,"nodeType":"64","endLine":50,"endColumn":30},{"ruleId":"57","severity":1,"message":"65","line":52,"column":8,"nodeType":"59","endLine":52,"endColumn":27,"suggestions":"66"},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'location.state?.username', 'reactNavigator', and 'roomId'. Either include them or remove the dependency array.","ArrayExpression",["67"],"React Hook useEffect has missing dependencies: 'onCodeChange', 'roomId', and 'socketRef'. Either include them or remove the dependency array. If 'onCodeChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["68"],"The ref value 'socketRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'socketRef.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","React Hook useEffect has a missing dependency: 'socketRef'. Either include it or remove the dependency array. Mutable values like 'socketRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["69"],{"desc":"70","fix":"71"},{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},"Update the dependencies array to be: [location.state?.username, reactNavigator, roomId]",{"range":"76","text":"77"},"Update the dependencies array to be: [onCodeChange, roomId, socketRef]",{"range":"78","text":"79"},"Update the dependencies array to be: [socketRef]",{"range":"80","text":"81"},[2626,2628],"[location.state?.username, reactNavigator, roomId]",[1376,1378],"[onCodeChange, roomId, socketRef]",[1754,1773],"[socketRef]"]